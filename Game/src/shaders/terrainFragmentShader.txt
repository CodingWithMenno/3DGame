#version 400 core

in vec2 pass_textureCoordinates;
flat in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
in float mapHeight;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

const float worldHeight = 60;

vec3 heightToRGB(in float height) {
    vec3 terrain_colours[4];
    terrain_colours[0] = vec3(0.34, 0.26, 0.37);
    terrain_colours[1] = vec3(0.09, 0.6, 0.02);
    terrain_colours[2] = vec3(1.0,1.0,1.0);

    if (height < 0.0) {
        return mix(terrain_colours[0], terrain_colours[1], height / 10 + 1);
    } else {
        return mix(terrain_colours[1], terrain_colours[2], height / 15);
    }

}

void main(void) {

    vec4 totalColour = vec4(heightToRGB(mapHeight), 1.0);

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float dotProduct = dot(unitNormal, unitLightVector);
	float brightness = max(dotProduct, 0.15);
	vec3 diffuse = brightness * lightColour;

	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;


	out_Color = vec4(diffuse, 1.0) * totalColour + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}